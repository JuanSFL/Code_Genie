[{"/Users/lukemickan/Desktop/CodeGenie-Project/Project_3/client/src/index.js":"1","/Users/lukemickan/Desktop/CodeGenie-Project/Project_3/client/src/reportWebVitals.js":"2","/Users/lukemickan/Desktop/CodeGenie-Project/Project_3/client/src/App.js":"3","/Users/lukemickan/Desktop/CodeGenie-Project/Project_3/client/src/pages/Home.js":"4","/Users/lukemickan/Desktop/CodeGenie-Project/Project_3/client/src/pages/Login.js":"5","/Users/lukemickan/Desktop/CodeGenie-Project/Project_3/client/src/pages/Profile.js":"6","/Users/lukemickan/Desktop/CodeGenie-Project/Project_3/client/src/pages/SingleThought.js":"7","/Users/lukemickan/Desktop/CodeGenie-Project/Project_3/client/src/pages/Ask.js":"8","/Users/lukemickan/Desktop/CodeGenie-Project/Project_3/client/src/pages/Signup.js":"9","/Users/lukemickan/Desktop/CodeGenie-Project/Project_3/client/src/pages/SearchQuestion.js":"10","/Users/lukemickan/Desktop/CodeGenie-Project/Project_3/client/src/pages/GenieMode.js":"11","/Users/lukemickan/Desktop/CodeGenie-Project/Project_3/client/src/components/Header/index.js":"12","/Users/lukemickan/Desktop/CodeGenie-Project/Project_3/client/src/components/ThoughtList/index.js":"13","/Users/lukemickan/Desktop/CodeGenie-Project/Project_3/client/src/utils/auth.js":"14","/Users/lukemickan/Desktop/CodeGenie-Project/Project_3/client/src/utils/queries.js":"15","/Users/lukemickan/Desktop/CodeGenie-Project/Project_3/client/src/utils/mutations.js":"16","/Users/lukemickan/Desktop/CodeGenie-Project/Project_3/client/src/components/SearchBar/index.js":"17","/Users/lukemickan/Desktop/CodeGenie-Project/Project_3/client/src/components/CommentList/index.js":"18","/Users/lukemickan/Desktop/CodeGenie-Project/Project_3/client/src/components/CommentForm/index.js":"19","/Users/lukemickan/Desktop/CodeGenie-Project/Project_3/client/src/components/NotAuthorized/index.js":"20"},{"size":499,"mtime":1678836953018,"results":"21","hashOfConfig":"22"},{"size":362,"mtime":1678836953029,"results":"23","hashOfConfig":"22"},{"size":2756,"mtime":1679015483229,"results":"24","hashOfConfig":"22"},{"size":1203,"mtime":1679040456507,"results":"25","hashOfConfig":"22"},{"size":2368,"mtime":1679089683372,"results":"26","hashOfConfig":"22"},{"size":1943,"mtime":1679124203968,"results":"27","hashOfConfig":"22"},{"size":1541,"mtime":1679089803764,"results":"28","hashOfConfig":"22"},{"size":2818,"mtime":1679089620819,"results":"29","hashOfConfig":"22"},{"size":2298,"mtime":1679089755791,"results":"30","hashOfConfig":"22"},{"size":379,"mtime":1679089725916,"results":"31","hashOfConfig":"22"},{"size":3098,"mtime":1679091728606,"results":"32","hashOfConfig":"22"},{"size":1851,"mtime":1679124645757,"results":"33","hashOfConfig":"22"},{"size":1404,"mtime":1679124112629,"results":"34","hashOfConfig":"22"},{"size":1043,"mtime":1678836953032,"results":"35","hashOfConfig":"22"},{"size":926,"mtime":1679012795890,"results":"36","hashOfConfig":"22"},{"size":1077,"mtime":1678836953033,"results":"37","hashOfConfig":"22"},{"size":179,"mtime":1678954622250,"results":"38","hashOfConfig":"22"},{"size":976,"mtime":1678860948010,"results":"39","hashOfConfig":"22"},{"size":2411,"mtime":1678861712314,"results":"40","hashOfConfig":"22"},{"size":523,"mtime":1679089663143,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"or2i80",{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"44"},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"44"},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"44"},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"44"},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"44"},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"44"},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"85","messages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"44"},{"filePath":"88","messages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"/Users/lukemickan/Desktop/CodeGenie-Project/Project_3/client/src/index.js",[],["90","91"],"/Users/lukemickan/Desktop/CodeGenie-Project/Project_3/client/src/reportWebVitals.js",[],"/Users/lukemickan/Desktop/CodeGenie-Project/Project_3/client/src/App.js",[],"/Users/lukemickan/Desktop/CodeGenie-Project/Project_3/client/src/pages/Home.js",["92"],"import { Link } from 'react-router-dom';\nimport genieDemo from \"../images/iphone-demo.png\"\nimport Auth from '../utils/auth';\n\nfunction Home() {\n\n\n  return (\n    <div className=\"appear\">\n      <div>\n      <div className=\"hero\">\n        <div className=\"welcome-info\">\n        <p className=\"description low-opacity\">CODE GENIE</p>\n      <h1 className=\"bold-intro\">For Developers, By Developers... And A.I.</h1>\n      <p className=\"description\">The Worlds first coding forum to integrate an A.I. chatbot to get developers answers immediately.</p>\n\n    {Auth.loggedIn() ? (\n            <>\n      <div className=\"btn-options\">\n      <Link to =\"/search\"><button className=\"flashy-btn left\">Search</button></Link>\n      </div>\n            </>\n          ) : (\n            <>\n      <div className=\"btn-options\">\n      <Link to =\"/login\"><button className=\"flashy-btn left\">Login</button></Link>\n      <p className=\"or\">Or</p>\n      <Link to =\"/signup\"><button className=\"flashy-btn left\">Signup</button></Link>\n      </div>\n            </>\n          )}\n      </div>\n      <Link to =\"/genie-mode\"><img src={genieDemo} className=\"card\"></img></Link>\n      </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Home;\n","/Users/lukemickan/Desktop/CodeGenie-Project/Project_3/client/src/pages/Login.js",["93"],"import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useMutation } from '@apollo/client';\nimport { LOGIN_USER } from '../utils/mutations';\nimport { Helmet } from \"react-helmet\";\n\nimport Auth from '../utils/auth';\n\nconst Login = (props) => {\n  const [formState, setFormState] = useState({ email: '', password: '' });\n  const [login, { error, data }] = useMutation(LOGIN_USER);\n\n  // update state based on form input changes\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  // submit form\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    console.log(formState);\n    try {\n      const { data } = await login({\n        variables: { ...formState },\n      });\n\n      Auth.login(data.login.token);\n    } catch (e) {\n      console.error(e);\n    }\n\n    // clear form values\n    setFormState({\n      email: '',\n      password: '',\n    });\n  };\n\n  return (\n    <div>\n       <Helmet>\n          <title>Code Genie | Login</title>\n      </Helmet>\n    <div className=\"large-container-center\">\n    <div className=\"login-cont\">\n      <h2>LOGIN</h2>\n      <form onSubmit={handleFormSubmit}>\n        <div className=\"enter-cred\">\n          <label htmlFor=\"email\" ></label>\n          <input\n            placeholder=\"youremail@test.com\"\n            name=\"email\"\n            type=\"email\"\n            value={formState.email}\n            className=\"cred-input\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"enter-cred\">\n          <label htmlFor=\"pwd\"></label>\n          <input\n            placeholder=\"password\"\n            name=\"password\"\n            type=\"password\"\n            value={formState.password}\n            className=\"cred-input\"\n            onChange={handleChange}\n          />\n        </div>\n        {error ? (\n          <div>\n            <p className=\"error-text\">The provided credentials are incorrect</p>\n          </div>\n        ) : null}\n        <div className=\"log-btns\">\n          <button type=\"submit\" className=\"flashy-btn\">Submit</button>\n          <p className=\"or\">Or</p>\n      <button className=\"flashy-btn\"><Link to=\"/signup\" >Signup</Link></button>\n          </div>\n      </form>\n      \n    </div>\n    </div>\n    </div>\n  );\n}\n\nexport default Login;\n","/Users/lukemickan/Desktop/CodeGenie-Project/Project_3/client/src/pages/Profile.js",[],"/Users/lukemickan/Desktop/CodeGenie-Project/Project_3/client/src/pages/SingleThought.js",[],"/Users/lukemickan/Desktop/CodeGenie-Project/Project_3/client/src/pages/Ask.js",["94","95","96"],"import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useMutation } from '@apollo/client';\n\nimport { ADD_THOUGHT } from '../utils/mutations';\nimport { QUERY_THOUGHTS, QUERY_ME } from '../utils/queries';\n\nimport Auth from '../utils/auth';\nimport NotAuthorized from '../components/NotAuthorized';\nimport { Helmet } from \"react-helmet\";\n\nconst Ask = () => {\n  const [thoughtText, setThoughtText] = useState('');\n\n  const [characterCount, setCharacterCount] = useState(0);\n\n  const [addThought, { error }] = useMutation(ADD_THOUGHT, {\n    update(cache, { data: { addThought } }) {\n      try {\n        const { thoughts } = cache.readQuery({ query: QUERY_THOUGHTS });\n\n        cache.writeQuery({\n          query: QUERY_THOUGHTS,\n          data: { thoughts: [addThought, ...thoughts] },\n        });\n      } catch (e) {\n        console.error(e);\n      }\n\n\n    },\n  });\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    try {\n      const { data } = await addThought({\n        variables: {\n          thoughtText,\n          thoughtAuthor: Auth.getProfile().data.username,\n        },\n      });\n\n      setThoughtText('');\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n\n    if (name === 'thoughtText' && value.length <= 280) {\n      setThoughtText(value);\n      setCharacterCount(value.length);\n    }\n  };\n\n  return (\n    <div className=\"top-pad\">\n      <Helmet>\n          <title>Code Genie | Ask</title>\n      </Helmet>\n      <h3 className=\"type-white large\">Ask the Community</h3>\n\n      {Auth.loggedIn() ? (\n        <>\n          <form\n            className=\"flex-row justify-center justify-space-between-md align-center\"\n            onSubmit={handleFormSubmit}\n          >\n            <div className=\"question-ask\">\n              <textarea\n                name=\"thoughtText\"\n                placeholder=\"Ask your question here\"\n                value={thoughtText}\n                className=\"ask-input\"\n                style={{ lineHeight: '1.5', resize: 'vertical' }}\n                onChange={handleChange}\n              ></textarea>\n            </div>\n            <p\n            className={`type-white ${\n              characterCount === 280 || error ? 'text-danger' : ''\n            }`}\n          >\n            Character Count: {characterCount}/280\n          </p>\n\n          \n              <button className=\"flashy-btn\" type=\"submit\">\n                Add Thought\n              </button>\n        \n            {error && (\n              <div className=\"col-12 my-3 bg-danger text-white p-3\">\n                {error.message}\n              </div>\n            )}\n          </form>\n        </>\n      ) : (\n   <NotAuthorized/>\n      )}\n    </div>\n  );\n};\n\nexport default Ask;\n","/Users/lukemickan/Desktop/CodeGenie-Project/Project_3/client/src/pages/Signup.js",["97","98"],"import React, { useState } from 'react';\nimport { Helmet } from \"react-helmet\";\n\n\nimport { useMutation } from '@apollo/client';\nimport { ADD_USER } from '../utils/mutations';\n\nimport Auth from '../utils/auth';\n\nconst Signup = () => {\n  const [formState, setFormState] = useState({\n    username: '',\n    email: '',\n    password: '',\n  });\n  const [addUser, { error, data }] = useMutation(ADD_USER);\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    console.log(formState);\n\n    try {\n      const { data } = await addUser({\n        variables: { ...formState },\n      });\n\n      Auth.login(data.addUser.token);\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  return (\n    <div>\n      <Helmet>\n          <title>Code Genie | Signup</title>\n      </Helmet>\n    <div className=\"large-container-center\">\n    <div className=\"login-cont\">\n\n      <h2>Signup</h2>\n      <form onSubmit={handleFormSubmit}>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"username\"></label>\n          <input\n                   placeholder=\"Username\"\n                   name=\"username\"\n                   type=\"text\"\n                   value={formState.name}\n            className=\"cred-input\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"email\"></label>\n          <input\n            placeholder=\"youremail@test.com\"\n                  name=\"email\"\n                  type=\"email\"\n                  value={formState.email}\n            className=\"cred-input\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"pwd\"></label>\n          <input\n            placeholder=\"password\"\n            name=\"password\"\n            type=\"password\"\n            value={formState.password}\n            className=\"cred-input\"\n            onChange={handleChange}\n          />\n        </div>\n          <button type=\"submit\" className=\"flashy-btn\">Submit</button>\n      </form>\n    </div>\n    </div>\n    </div>\n  );\n}\n\nexport default Signup;\n","/Users/lukemickan/Desktop/CodeGenie-Project/Project_3/client/src/pages/SearchQuestion.js",[],"/Users/lukemickan/Desktop/CodeGenie-Project/Project_3/client/src/pages/GenieMode.js",["99","100"],"import React, { useState } from \"react\";\nimport tokens from \"../images/tokens.png\";\nimport Auth from \"../utils/auth\";\nimport { Link } from \"react-router-dom\";\nimport { useQuery, gql, useLazyQuery } from \"@apollo/client\";\nimport NotAuthorized from \"../components/NotAuthorized\";\nimport { Helmet } from \"react-helmet\";\n\nconst GET_OPENAI_ANSWER = gql`\n  query Openai($openaiInput2: String!) {\n    openai(input: $openaiInput2) {\n      answer\n    }\n  }\n`;\n\nfunction GenieMode() {\n  const [question, setQuestion] = useState(\"\"); // add a state variable to store the question\n  const [setAnswer, { loading, data }] = useLazyQuery(GET_OPENAI_ANSWER);\n  const [history, setHistory] = useState([]); // add a state variable to store the history of questions and answers\n\n  const handleChange = (event) => {\n    setQuestion(event.target.value); // update the state variable with the user input\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    setAnswer({ variables: { openaiInput2: question } });\n    // add the current question and its response to the history array\n    setHistory([...history, { question, answer: data?.openai.answer }]);\n    // clear the question input field\n    setQuestion(\"\");\n  };\n\n  console.log(\"Genie Mode Page\", data);\n  return (\n    <div>\n      <Helmet>\n          <title>Code Genie | GenieMode</title>\n      </Helmet>\n      <div className=\"genie-ask\">\n        <h2>\n          Get Your Answers. <span className=\"glowing\">Instantly.</span>\n        </h2>\n        {Auth.loggedIn() ? (\n          <form onSubmit={handleSubmit}>\n            <input\n              className=\"ask-q\"\n              placeholder=\"Ask the Genie\"\n              type=\"text\"\n              title=\"Search\"\n              value={question}\n              onChange={handleChange}\n            ></input>\n            <img src={tokens} className=\"token-icon\" alt=\"token-icon\"></img>\n            {loading ? (\n              <div class=\"spinner\">\n                <div class=\"spinner1\"></div>\n              </div>\n            ) : (\n              <div>\n                <button className=\"lamp-btn\" type=\"submit\">\n                  Rub the Lamp\n                </button>\n                <p className=\"small-text\">\n                  * This Question Will Cost 1 Genie Token *\n                </p>\n                <div className={`genie-response ${data?.openai.answer ? \"loaded\" : \"\"}`}>\n                  <p className=\"response\">{question}</p>\n                  <p className=\"response\">{data?.openai.answer}</p>\n                </div>\n                {/* <div className=\"genie-history\">\n                  {history.slice(-3).map((entry, index) => (\n                    <div key={index} className=\"history-entry\">\n                      <p className=\"question\">{entry.question}</p>\n                      <p className=\"answer\">{entry.answer}</p>\n                    </div>\n                  ))}\n                </div> */}\n              </div>\n            )}\n          </form>\n        ) : (\n          <>\n            <NotAuthorized />\n          </>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default GenieMode;\n","/Users/lukemickan/Desktop/CodeGenie-Project/Project_3/client/src/components/Header/index.js",["101","102","103"],"/Users/lukemickan/Desktop/CodeGenie-Project/Project_3/client/src/components/ThoughtList/index.js",[],"/Users/lukemickan/Desktop/CodeGenie-Project/Project_3/client/src/utils/auth.js",["104"],"import decode from 'jwt-decode';\n\nclass AuthService {\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  loggedIn() {\n    const token = this.getToken();\n    // If there is a token and it's not expired, return `true`\n    return token && !this.isTokenExpired(token) ? true : false;\n  }\n\n  isTokenExpired(token) {\n    // Decode the token to get its expiration time that was set by the server\n    const decoded = decode(token);\n    // If the expiration time is less than the current time (in seconds), the token is expired and we return `true`\n    if (decoded.exp < Date.now() / 1000) {\n      localStorage.removeItem('id_token');\n      return true;\n    }\n    // If token hasn't passed its expiration time, return `false`\n    return false;\n  }\n\n  getToken() {\n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    localStorage.setItem('id_token', idToken);\n    window.location.assign('/');\n  }\n\n  logout() {\n    localStorage.removeItem('id_token');\n    window.location.reload();\n  }\n}\n\nexport default new AuthService();\n","/Users/lukemickan/Desktop/CodeGenie-Project/Project_3/client/src/utils/queries.js",[],"/Users/lukemickan/Desktop/CodeGenie-Project/Project_3/client/src/utils/mutations.js",[],"/Users/lukemickan/Desktop/CodeGenie-Project/Project_3/client/src/components/SearchBar/index.js",[],"/Users/lukemickan/Desktop/CodeGenie-Project/Project_3/client/src/components/CommentList/index.js",[],"/Users/lukemickan/Desktop/CodeGenie-Project/Project_3/client/src/components/CommentForm/index.js",["105"],"import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useMutation } from '@apollo/client';\n\nimport { ADD_COMMENT } from '../../utils/mutations';\n\nimport Auth from '../../utils/auth';\n\nconst CommentForm = ({ thoughtId }) => {\n  const [commentText, setCommentText] = useState('');\n  const [characterCount, setCharacterCount] = useState(0);\n\n  const [addComment, { error }] = useMutation(ADD_COMMENT);\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    try {\n      const { data } = await addComment({\n        variables: {\n          thoughtId,\n          commentText,\n          commentAuthor: Auth.getProfile().data.username,\n        },\n      });\n\n      setCommentText('');\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n\n    if (name === 'commentText' && value.length <= 280) {\n      setCommentText(value);\n      setCharacterCount(value.length);\n    }\n  };\n\n  return (\n    <div>\n      <h4 className=\"type-white align\">Reply to this post</h4>\n\n      {Auth.loggedIn() ? (\n        <>\n          <form\n            className=\"flex-row justify-center justify-space-between-md align-center\"\n            onSubmit={handleFormSubmit}\n          >\n            <div className=\"col-12 col-lg-9\">\n              <textarea\n                name=\"commentText\"\n                placeholder=\"Add your comment...\"\n                value={commentText}\n                className=\"comment-input\"\n                style={{ lineHeight: '1.5', resize: 'vertical' }}\n                onChange={handleChange}\n              ></textarea>\n            </div>\n            <p\n           className={`type-white align ${\n            characterCount === 280 || error ? 'text-danger' : ''\n          }`}\n          >\n            Character Count: {characterCount}/280\n            {error && <span className=\"ml-2\">{error.message}</span>}\n          </p>\n\n            <div className=\"col-12 col-lg-3\">\n              <button className=\"flashy-btn under\" type=\"submit\">\n                Add Comment\n              </button>\n            </div>\n          </form>\n        </>\n      ) : (\n        <p>\n          You need to be logged in to share your thoughts. Please{' '}\n          <Link to=\"/login\">login</Link> or <Link to=\"/signup\">signup.</Link>\n        </p>\n      )}\n    </div>\n  );\n};\n\nexport default CommentForm;\n","/Users/lukemickan/Desktop/CodeGenie-Project/Project_3/client/src/components/NotAuthorized/index.js",[],{"ruleId":"106","replacedBy":"107"},{"ruleId":"108","replacedBy":"109"},{"ruleId":"110","severity":1,"message":"111","line":33,"column":31,"nodeType":"112","endLine":33,"endColumn":69},{"ruleId":"113","severity":1,"message":"114","line":11,"column":26,"nodeType":"115","messageId":"116","endLine":11,"endColumn":30},{"ruleId":"113","severity":1,"message":"117","line":2,"column":10,"nodeType":"115","messageId":"116","endLine":2,"endColumn":14},{"ruleId":"113","severity":1,"message":"118","line":6,"column":26,"nodeType":"115","messageId":"116","endLine":6,"endColumn":34},{"ruleId":"113","severity":1,"message":"114","line":38,"column":15,"nodeType":"115","messageId":"116","endLine":38,"endColumn":19},{"ruleId":"113","severity":1,"message":"119","line":16,"column":21,"nodeType":"115","messageId":"116","endLine":16,"endColumn":26},{"ruleId":"113","severity":1,"message":"114","line":16,"column":28,"nodeType":"115","messageId":"116","endLine":16,"endColumn":32},{"ruleId":"113","severity":1,"message":"117","line":4,"column":10,"nodeType":"115","messageId":"116","endLine":4,"endColumn":14},{"ruleId":"113","severity":1,"message":"120","line":5,"column":10,"nodeType":"115","messageId":"116","endLine":5,"endColumn":18},{"ruleId":"121","severity":1,"message":"122","line":24,"column":9,"nodeType":"112","endLine":24,"endColumn":49},{"ruleId":"110","severity":1,"message":"111","line":34,"column":18,"nodeType":"112","endLine":34,"endColumn":87},{"ruleId":"121","severity":1,"message":"123","line":44,"column":9,"nodeType":"112","endLine":44,"endColumn":50},{"ruleId":"124","severity":1,"message":"125","line":41,"column":1,"nodeType":"126","endLine":41,"endColumn":34},{"ruleId":"113","severity":1,"message":"114","line":19,"column":15,"nodeType":"115","messageId":"116","endLine":19,"endColumn":19},"no-native-reassign",["127"],"no-negated-in-lhs",["128"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-unused-vars","'data' is assigned a value but never used.","Identifier","unusedVar","'Link' is defined but never used.","'QUERY_ME' is defined but never used.","'error' is assigned a value but never used.","'useQuery' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","import/no-anonymous-default-export","Assign instance to a variable before exporting as module default","ExportDefaultDeclaration","no-global-assign","no-unsafe-negation"]